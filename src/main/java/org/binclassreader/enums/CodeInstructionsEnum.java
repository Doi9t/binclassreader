/*
 *    Copyright 2014 - 2016 Yannick Watier
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package org.binclassreader.enums;

/**
 * Created by Yannick on 5/23/2016.
 */

public enum CodeInstructionsEnum {
    NOP((short) 0x00),
    ACONST_NULL((short) 0x01),
    ICONST_M1((short) 0x02),
    ICONST_0((short) 0x03),
    ICONST_1((short) 0x04),
    ICONST_2((short) 0x05),
    ICONST_3((short) 0x06),
    ICONST_4((short) 0x07),
    ICONST_5((short) 0x08),
    LCONST_0((short) 0x09),
    LCONST_1((short) 0x0A),
    FCONST_0((short) 0x0B),
    FCONST_1((short) 0x0C),
    FCONST_2((short) 0x0D),
    DCONST_0((short) 0x0E),
    DCONST_1((short) 0x0F),
    BIPUSH((short) 0x10),
    SIPUSH((short) 0x11),
    LDC((short) 0x12),
    LDC_W((short) 0x13),
    LDC2_W((short) 0x14),
    ILOAD((short) 0x15),
    LLOAD((short) 0x16),
    FLOAD((short) 0x17),
    DLOAD((short) 0x18),
    ALOAD((short) 0x19),
    ILOAD_0((short) 0x1A),
    ILOAD_1((short) 0x1B),
    ILOAD_2((short) 0x1C),
    ILOAD_3((short) 0x1D),
    LLOAD_0((short) 0x1E),
    LLOAD_1((short) 0x1F),
    LLOAD_2((short) 0x20),
    LLOAD_3((short) 0x21),
    FLOAD_0((short) 0x22),
    FLOAD_1((short) 0x23),
    FLOAD_2((short) 0x24),
    FLOAD_3((short) 0x25),
    DLOAD_0((short) 0x26),
    DLOAD_1((short) 0x27),
    DLOAD_2((short) 0x28),
    DLOAD_3((short) 0x29),
    ALOAD_0((short) 0x2A),
    ALOAD_1((short) 0x2B),
    ALOAD_2((short) 0x2C),
    ALOAD_3((short) 0x2D),
    IALOAD((short) 0x2E),
    LALOAD((short) 0x2F),
    FALOAD((short) 0x30),
    DALOAD((short) 0x31),
    AALOAD((short) 0x32),
    BALOAD((short) 0x33),
    CALOAD((short) 0x34),
    SALOAD((short) 0x35),
    ISTORE((short) 0x36),
    LSTORE((short) 0x37),
    FSTORE((short) 0x38),
    DSTORE((short) 0x39),
    ASTORE((short) 0x3A),
    ISTORE_0((short) 0x3B),
    ISTORE_1((short) 0x3C),
    ISTORE_2((short) 0x3D),
    ISTORE_3((short) 0x3E),
    LSTORE_0((short) 0x3F),
    LSTORE_1((short) 0x40),
    LSTORE_2((short) 0x41),
    LSTORE_3((short) 0x42),
    FSTORE_0((short) 0x43),
    FSTORE_1((short) 0x44),
    FSTORE_2((short) 0x45),
    FSTORE_3((short) 0x46),
    DSTORE_0((short) 0x47),
    DSTORE_1((short) 0x48),
    DSTORE_2((short) 0x49),
    DSTORE_3((short) 0x4A),
    ASTORE_0((short) 0x4B),
    ASTORE_1((short) 0x4C),
    ASTORE_2((short) 0x4D),
    ASTORE_3((short) 0x4E),
    IASTORE((short) 0x4F),
    LASTORE((short) 0x50),
    FASTORE((short) 0x51),
    DASTORE((short) 0x52),
    AASTORE((short) 0x53),
    BASTORE((short) 0x54),
    CASTORE((short) 0x55),
    SASTORE((short) 0x56),
    POP((short) 0x57),
    POP2((short) 0x58),
    DUP((short) 0x59),
    DUP_X1((short) 0x5A),
    DUP_X2((short) 0x5B),
    DUP2((short) 0x5C),
    DUP2_X1((short) 0x5D),
    DUP2_X2((short) 0x5E),
    SWAP((short) 0x5F),
    IADD((short) 0x60),
    LADD((short) 0x61),
    FADD((short) 0x62),
    DADD((short) 0x63),
    ISUB((short) 0x64),
    LSUB((short) 0x65),
    FSUB((short) 0x66),
    DSUB((short) 0x67),
    IMUL((short) 0x68),
    LMUL((short) 0x69),
    FMUL((short) 0x6A),
    DMUL((short) 0x6B),
    IDIV((short) 0x6C),
    LDIV((short) 0x6D),
    FDIV((short) 0x6E),
    DDIV((short) 0x6F),
    IREM((short) 0x70),
    LREM((short) 0x71),
    FREM((short) 0x72),
    DREM((short) 0x73),
    INEG((short) 0x74),
    LNEG((short) 0x75),
    FNEG((short) 0x76),
    DNEG((short) 0x77),
    ISHL((short) 0x78),
    LSHL((short) 0x79),
    ISHR((short) 0x7A),
    LSHR((short) 0x7B),
    IUSHR((short) 0x7C),
    LUSHR((short) 0x7D),
    IAND((short) 0x7E),
    LAND((short) 0x7F),
    IOR((short) 0x80),
    LOR((short) 0x81),
    IXOR((short) 0x82),
    LXOR((short) 0x83),
    IINC((short) 0x84),
    I2L((short) 0x85),
    I2F((short) 0x86),
    I2D((short) 0x87),
    L2I((short) 0x88),
    L2F((short) 0x89),
    L2D((short) 0x8A),
    F2I((short) 0x8B),
    F2L((short) 0x8C),
    F2D((short) 0x8D),
    D2I((short) 0x8E),
    D2L((short) 0x8F),
    D2F((short) 0x90),
    I2B((short) 0x91),
    I2C((short) 0x92),
    I2S((short) 0x93),
    LCMP((short) 0x94),
    FCMPL((short) 0x95),
    FCMPG((short) 0x96),
    DCMPL((short) 0x97),
    DCMPG((short) 0x98),
    IFEQ((short) 0x99),
    IFNE((short) 0x9A),
    IFLT((short) 0x9B),
    IFGE((short) 0x9C),
    IFGT((short) 0x9D),
    IFLE((short) 0x9E),
    IF_ICMPEQ((short) 0x9F),
    IF_ICMPNE((short) 0xA0),
    IF_ICMPLT((short) 0xA1),
    IF_ICMPGE((short) 0xA2),
    IF_ICMPGT((short) 0xA3),
    IF_ICMPLE((short) 0xA4),
    IF_ACMPEQ((short) 0xA5),
    IF_ACMPNE((short) 0xA6),
    GOTO((short) 0xA7),
    JSR((short) 0xA8),
    RET((short) 0xA9),
    TABLESWITCH((short) 0xAA),
    LOOKUPSWITCH((short) 0xAB),
    IRETURN((short) 0xAC),
    LRETURN((short) 0xAD),
    FRETURN((short) 0xAE),
    DRETURN((short) 0xAF),
    ARETURN((short) 0xB0),
    RETURN((short) 0xB1),
    GETSTATIC((short) 0xB2),
    PUTSTATIC((short) 0xB3),
    GETFIELD((short) 0xB4),
    PUTFIELD((short) 0xB5),
    INVOKEVIRTUAL((short) 0xB6),
    INVOKESPECIAL((short) 0xB7),
    INVOKESTATIC((short) 0xB8),
    INVOKEINTERFACE((short) 0xB9),
    INVOKEDYNAMIC((short) 0xBA),
    NEW((short) 0xBB),
    NEWARRAY((short) 0xBC),
    ANEWARRAY((short) 0xBD),
    ARRAYLENGTH((short) 0xBE),
    ATHROW((short) 0xBF),
    CHECKCAST((short) 0xC0),
    INSTANCEOF((short) 0xC1),
    MONITORENTER((short) 0xC2),
    MONITOREXIT((short) 0xC3),
    WIDE((short) 0xC4),
    MULTIANEWARRAY((short) 0xC5),
    IFNULL((short) 0xC6),
    IFNONNULL((short) 0xC7),
    GOTO_W((short) 0xC8),
    JSR_W((short) 0xC9),
    BREAKPOINT((short) 0xCA),
    IMPDEP1((short) 0xFE),
    IMPDEP2((short) 0xFF);

    private short value;

    CodeInstructionsEnum(short value) {
        this.value = value;
    }

    public short getValue() {
        return value;
    }
}
